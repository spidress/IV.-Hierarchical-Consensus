#include "server.h"
#define SLEEPTIME 2

int startServer()
{
#ifdef _WIN32
        system("del server.log");
#else
        system("rm server.log");
#endif
    string strIP;
    int iPort;

    if(!loadWorkerDetail(iWorker, strIP, iPort)) return false;
    char szCmd[4096];
#ifdef _WIN32
    SOCKET listenfd, connfd;
    SOCKADDR_IN serveraddr;
    WSADATA wsa;
    WSAStartup(MAKEWORD(2,0),&wsa);    //初始化WS2_32.DLL
#else
    int    listenfd, connfd;
    struct      serveraddr;
#endif
    char    buff[4096];
    int     len;

//    sprintf(cmd, "rm server.log");
//    system(cmd);
//创建套接字
#ifdef _WIN32
    if((listenfd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) <= 0) 
    {
        printf("create socket error: %s(errno: %d)\n",strerror(errno),errno);
        return -1;
    }
#else
    if((listenfd = socket(AF_INET, SOCK_STREAM, 0)) == -1 )
    {
        printf("create socket error: %s(errno: %d)\n",strerror(errno),errno);
        return -1;
    }
#endif

    printf("openning IP = %s, Port = %d\n", strIP.c_str(), iPort);
	memset(&serveraddr, 0, sizeof(serveraddr));

    //命名协议，IP，端口
    serveraddr.sin_family = AF_INET;
    serveraddr.sin_port = htons(iPort);
#ifdef _WIN32
    serveraddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY);
#else
    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);
#endif

    //绑定套接字
#ifdef _WIN32
	printf("Windows\n");
    if(::bind(listenfd, (SOCKADDR *)&serveraddr, sizeof(serveraddr)) != 0)
    {
        printf("bind socket error: %s(errno: %d)\n",strerror(errno),errno);
        return -1;
    }
//    bind(listenfd, (SOCKADDR *)&serveraddr, sizeof(serveraddr));
#else
	printf("Linux\n");
    if(bind(listenfd, (struct sockaddr*)&serveraddr, sizeof(serveraddr)) == -1){
        printf("bind socket error: %s(errno: %d)\n",strerror(errno),errno);
        return -1;
    }
#endif

    if( listen(listenfd, 10) == -1){
        printf("listen socket error: %s(errno: %d)\n",strerror(errno),errno);
        return -1;
    }

    //监听请求
    printf("======waiting for client's request======\n");
    while(1)
    {
#ifdef _WIN32
        //if((connfd = accept(listenfd, (SOCKADDR *)&clientaddr, &len))<=0)
        if((connfd = accept(listenfd, (SOCKADDR *)NULL, 0))<=0)
        {
            printf("accept socket error: %s(errno: %d)",strerror(errno),errno);
            continue;
        }
        len = recv(connfd, buff, MAXLINE, 0);
        if(len <= 0)    
        {
            printf("close connection!\n");
            closesocket(connfd);
            continue;
        }
#else
        if((connfd = accept(listenfd, (struct sockaddr*)NULL, NULL)) == -1)
        {
            printf("accept socket error: %s(errno: %d)",strerror(errno),errno);
            close(connfd);
            continue;
        }
        len = recv(connfd, buff, MAXLINE, 0);
        if(len <= 0)
        {
            printf("close connection!\n");
            close(connfd);
            continue;
        }
#endif

        buff[len] = '\0';
        printf("recv msg from client: %s\n", buff);
        sprintf(szCmd, "echo %s >> server.log", buff);
        system(szCmd);

        stringstream ssBuff(buff);
        string strAction;
        int pk;
        string strDetail;

        //process the messages to server
        ssBuff >> strAction >> pk >> strDetail;

        //传输数据不记入日志
        if(strAction == "data")
        {
            stringstream ssCommand;
            ssCommand << "echo " << strDetail << " > " << pk << ".dat";
            system(ssCommand.str().c_str());
        }
        else
        {
            //write to main.log
            ofstream fout("main.log", ios::app|ios::out);
            if(!fout)
            {
                fout.close();
                printf("open main.log err\n");
#ifdef _WIN32
                closesocket(connfd);
#else
                close(connfd);
#endif
                break;
            }
            fout << buff << " " << loadTime() << endl;
            fout.close();

            if(strAction == "stop")
            {
                printf("stop to exit\n");
                sendMsg("stop", EXCL);
#ifdef _WIN32
                Sleep(SLEEPTIME);
#else
                usleep(SLEEPTIME*1000);
#endif
                system("echo 1 > stop.txt");
#ifdef _WIN32
                closesocket(connfd);
#else
                close(connfd);
#endif
                break;
            }
            //genTask then negotiate
            else if(strAction == "genTask")
            {
                if(!negotiate(pk))
                    return false;
            }

            //newTask then add to chain
            if(strAction == "newTask")
            {
                thread tNewJob(newJob, ssBuff.str());
                tNewJob.detach();
            }

            //receive Solution then run chain
            if(strAction == "recSolution")
            {
                thread tRecJob(recJob, ssBuff.str());
                tRecJob.detach();
            }

            if(strAction == "print")
            {
                thread tPrintJob(printJob);
                tPrintJob.detach();
            }
        }

#ifdef _WIN32
        closesocket(connfd);
#else
        close(connfd);
#endif
    }
#ifdef _WIN32
    WSACleanup();     //释放WS2_32.DLL
#else
    close(listenfd);
#endif
    return 0;
}
